/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package orla.digital.desafiobackend.controller.v1;

import orla.digital.desafiobackend.domain.dto.v1.FuncionarioV1DTO;
import orla.digital.desafiobackend.domain.dto.v1.SearchFuncionario400ResponseV1DTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-31T20:18:49.114273100-03:00[America/Fortaleza]")
@Validated
@RestController
@Tag(name = "Funcionário", description = "Controles para funcionários")
@RequestMapping("${openapi.desafioBackend.base-path:/desafio-backend/v1}")
public interface FuncionariosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /funcionarios : Criar funcionário
     * Criar funcionário
     *
     * @param novoFuncionario Informações do novo funcionário para inclusão (required)
     * @return Created (status code 201)
     *         or Algum parâmetro informado está inválido (status code 400)
     *         or Não autorizado (status code 401)
     *         or Não permitido (status code 403)
     *         or Erro não identificado (status code 500)
     *         or Não implementado (status code 501)
     */
    @Operation(
        operationId = "createFuncionario",
        summary = "Criar funcionário",
        description = "Criar funcionário",
        tags = { "Funcionário" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "Algum parâmetro informado está inválido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Não autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Não permitido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro não identificado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "501", description = "Não implementado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/funcionarios",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.CREATED)
    default void _createFuncionario(
        @Parameter(name = "Novo Funcionario", description = "Informações do novo funcionário para inclusão", required = true) @Valid @RequestBody FuncionarioV1DTO novoFuncionario
    ) {
        createFuncionario(novoFuncionario);
    }

    // Override this method
    default  void createFuncionario(FuncionarioV1DTO novoFuncionario) {
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * GET /funcionarios : Buscar todos funcionários cadastrados
     * Buscar todos os funcionários cadastrados
     *
     * @return Sucesso (status code 200)
     *         or Algum parâmetro informado está inválido (status code 400)
     *         or Não autorizado (status code 401)
     *         or Não permitido (status code 403)
     *         or Erro não identificado (status code 500)
     *         or Não implementado (status code 501)
     */
    @Operation(
        operationId = "searchFuncionario",
        summary = "Buscar todos funcionários cadastrados",
        description = "Buscar todos os funcionários cadastrados",
        tags = { "Funcionário" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FuncionarioV1DTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Algum parâmetro informado está inválido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Não autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Não permitido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro não identificado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "501", description = "Não implementado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/funcionarios",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    default List<FuncionarioV1DTO> _searchFuncionario(
        
    ) {
        return searchFuncionario();
    }

    // Override this method
    default  List<FuncionarioV1DTO> searchFuncionario() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"projetos\" : [ { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" }, { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" } ], \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"projetos\" : [ { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" }, { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" } ], \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1, \"email\" : \"email@teste.com\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * GET /funcionarios/{id} : Buscar funcionário pelo identificador
     * Buscar funcionário pelo identificador
     *
     * @param id Id do funcionário (required)
     * @return Sucesso (status code 200)
     *         or Algum parâmetro informado está inválido (status code 400)
     *         or Não autorizado (status code 401)
     *         or Não permitido (status code 403)
     *         or O recurso solicitado não foi encontrado (status code 404)
     *         or Erro não identificado (status code 500)
     *         or Não implementado (status code 501)
     */
    @Operation(
        operationId = "searchFuncionarioById",
        summary = "Buscar funcionário pelo identificador",
        description = "Buscar funcionário pelo identificador",
        tags = { "Funcionário" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FuncionarioV1DTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Algum parâmetro informado está inválido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Não autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Não permitido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "O recurso solicitado não foi encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro não identificado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "501", description = "Não implementado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/funcionarios/{id}",
        produces = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    default FuncionarioV1DTO _searchFuncionarioById(
        @Parameter(name = "id", description = "Id do funcionário", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return searchFuncionarioById(id);
    }

    // Override this method
    default  FuncionarioV1DTO searchFuncionarioById(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"projetos\" : [ { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" }, { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" } ], \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1, \"email\" : \"email@teste.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        throw new IllegalArgumentException("Not implemented");

    }


    /**
     * PUT /funcionarios/{id} : Atualizar funcionário
     * Atualizar funcionário
     *
     * @param id Id do funcionário (required)
     * @param funcionario Informações do funcionário para atualização (required)
     * @return Sucesso (status code 200)
     *         or Algum parâmetro informado está inválido (status code 400)
     *         or Não autorizado (status code 401)
     *         or Não permitido (status code 403)
     *         or O recurso solicitado não foi encontrado (status code 404)
     *         or Erro não identificado (status code 500)
     *         or Não implementado (status code 501)
     */
    @Operation(
        operationId = "updateFuncionario",
        summary = "Atualizar funcionário",
        description = "Atualizar funcionário",
        tags = { "Funcionário" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FuncionarioV1DTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Algum parâmetro informado está inválido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "401", description = "Não autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Não permitido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "O recurso solicitado não foi encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro não identificado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            }),
            @ApiResponse(responseCode = "501", description = "Não implementado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchFuncionario400ResponseV1DTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/funcionarios/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    @ResponseStatus(HttpStatus.OK)
    default FuncionarioV1DTO _updateFuncionario(
        @Parameter(name = "id", description = "Id do funcionário", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Funcionario", description = "Informações do funcionário para atualização", required = true) @Valid @RequestBody FuncionarioV1DTO funcionario
    ) {
        return updateFuncionario(id, funcionario);
    }

    // Override this method
    default  FuncionarioV1DTO updateFuncionario(Integer id, FuncionarioV1DTO funcionario) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"projetos\" : [ { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" }, { \"nome\" : \"Projeto 01\", \"id\" : 1, \"funcionarios\" : [ { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" }, { \"salario\" : 1000.0, \"cpf\" : \"12345678901\", \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1.0, \"email\" : \"email@teste.com\" } ], \"dataCriacao\" : \"2020-01-01T00:00:00.000+00:00\" } ], \"nome\" : \"Ricardo Carvalho Agostinho\", \"id\" : 1, \"email\" : \"email@teste.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        throw new IllegalArgumentException("Not implemented");

    }

}
